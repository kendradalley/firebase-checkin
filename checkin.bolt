type UserId extends String;

type Event {
  title: String;
  owner: UserId;
}

type User {
  email: String | Null;
  displayName: String | Null;
  photoURL: String | Null;
  feedback: Number | Null;
}

type Role extends String {
  validate() { this == 'admin' }
}

path /users/{uid} is User {
  // Allow new user to read that his user record has not yet
  // been created (null).
  read() { this == null || isAdmin() || isCurrentUser(uid) }

  create() { isCurrentUser(uid) }
  update() { isCurrentUser(uid) }
  delete() { isAdmin() }
}

path /roles/{uid} is Role {
  read() { isAdmin() }
  write() { isAdmin() }
}

path /events/{id} is Event {
  read() { true }
  create() { auth != null }
  update() { isCurrentUser(this.owner) }
  delete() { isCurrentUser(this.owner) }
}

path /events/{id}/attendees/{uid} is User {
  create() { isCurrentUser(uid) }
  update() { isCurrentUser(uid) }
}

isCurrentUser(id) { auth != null && auth.uid == id }
isAdmin() { auth != null && root.roles[auth.uid] == 'admin' }
